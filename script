#!/bin/bash
set -eo pipefail

if [ -z "$1" ]; then
    cat <<EOF
Usage: $0 CMD ARGS:
    start -lv                # Start with local mounts
    start-lv-memcheck        # Start with local mounts and memchecking mysqld
    start-lv-massif          # Start with local mounts and massif mysqld
    start-lv-dhat            # Start with local mounts and dhat mysqld
    start-lv-from-build V T  # Start with local mounts version V and tarball T

    check-config             # Check config for a running cluster

    monitor mysqld_1         # Monitor mysqld_1
    monitor mysqld_2         # Monitor mysqld_2
    monitor mgm_1            # Monitor cluster
    monitor ndbd_1           # Monitor data node 1
    monitor ndbd_2           # Monitor data node 2
    monitor mounts           # Monitor size of local mounts
    monitor mysql_rollup PID # Monitor proc rollup in mysqld_1 for PID
    save-mysqld-memusage 1   # Save memory usage from performance schema on mysqld_1
    save-mysqld-memusage 2   # Save memory usage from performance schema on mysqld_2

    runtest dbt2_single      # Run test dbt2_single
    runtest dbt2_multi       # Run test dbt2_multi
    runtest sysbench_single  # Run test sysbench_single
    runtest sysbench_multi   # Run test sysbench_multi
    runtest ndbinfo          # Run ndbinfo load test
    runtest createdroptbl    # Run CREATE/DROP table load test
    dotest NAME              # Run 1000x dbt2_single and log time/RES to file

    access-docker            # Access docker internals
    sql                      # Access mysqld_1 SQL as mysql user
    sqlr                     # Access mysqld_1 SQL as root user
    cleanup                  # Cleanup volumes, mounts, files, containers etc.

    tail-memcheck 1          # Tail the memcheck log for mysqld_1
    tail-memcheck 2          # Tail the memcheck log for mysqld_2

    stop-mysqld 1            # Send TERM to PID 9 in mysqld_1
    stop-mysqld 2            # Send TERM to PID 9 in mysqld_2
EOF
    exit
fi

start(){
    ./build_run_docker.sh \
        -ep procps \
        -ruri https://repo.hops.works/master/rondb-21.04.9-linux-glibc2.17-x86_64.tar.gz \
        -v 21.04.9 -m 1 -g 1 -r 2 -my 2 -a 1 "$@"
}

start-lv-from-build(){
    v="$1"
    t="$2"
    shift;shift
    ./build_run_docker.sh \
        -ep procps \
        -v "$v" -ruri "$t" -rtarl -m 1 -g 1 -r 2 -my 2 -a 1 -lv "$@"
}

start-lv-memcheck(){
    start -lv -ep "valgrind procps" -mi "valgrind --leak-check=full --error-limit=no --log-file=/srv/hops/mysql-cluster/mysql-files/memcheck.log"
}

start-lv-massif(){
    start -lv -ep "valgrind procps" -mi "valgrind --tool=massif --error-limit=no --stacks=yes --max-snapshots=200 --massif-out-file=/srv/hops/mysql-cluster/mysql-files/massif.out.%p --log-file=/srv/hops/mysql-cluster/mysql-files/massif.log"
}

start-lv-dhat(){
    start -lv -ep "valgrind procps" -mi "valgrind --tool=dhat --num-callers=5 --dhat-out-file=/srv/hops/mysql-cluster/mysql-files/dhat.out.%p --log-file=/srv/hops/mysql-cluster/mysql-files/dhat.log"
}

monitor() {
    case "$1" in
        mysqld_*|ndbd_*)
            docker exec -it "$1" top
            ;;
        mgm_1)
            docker exec -it mgmd_1 bash -c 'while true; do echo show; sleep 1; done | ndb_mgm'
            ;;
        mounts)
            watch du -sh autogenerated_files/*/volumes/
            ;;
        mysql_rollup)
            docker exec -it mysqld_1 watch cat "/proc/$2/smaps_rollup"
            ;;
    esac
}

save-mysqld-memusage() {
    docker exec -it -u root "mysqld_$1" bash -c 'while true; do echo "select now(), event_name, sum(current_number_of_bytes_used) from performance_schema.memory_summary_global_by_event_name group by event_name having sum(current_number_of_bytes_used)>0;" | mysql >> /srv/hops/mysql-cluster/mysql-files/memory-performance-schema.tsv; date; ls -lah /srv/hops/mysql-cluster/mysql-files/; sleep 60; done'
}

runtest() {
    case "$1" in
        dbtc_*)
            docker exec -it api_1 bench_run.sh --verbose \
                   --default-directory /home/mysql/benchmarks/"$1" --generate-dbt2-data
            ;;
        sysbench_*)
            docker exec -it api_1 bench_run.sh --verbose \
                   --default-directory /home/mysql/benchmarks/"$1"
            ;;
        ndbinfo)
            query-ndbinfo
            ;;
        createdroptbl)
            createdroptbl-test
            ;;
    esac
}

createdroptbl-test() {
    db=$(rndid)
    (
        echo "create database $db; use $db;"
        for batch in $(seq 1); do
            for tblnr in $(seq 100); do
                echo "create table test_${batch}_${tblnr} (col1 varchar(6500) not null);"
            done
            for tblnr in $(seq 100); do
                echo "drop table test_${batch}_${tblnr};"
            done
        done
        echo "drop database $db;"
    ) | docker exec -i mysqld_1 mysql -u root
}

query-ndbinfo() {
    NDBINFOTABLES=()
    NDBINFOTABLES+=("arbitrator_validity_detail")
    NDBINFOTABLES+=("arbitrator_validity_summary")
    NDBINFOTABLES+=("blocks")
    NDBINFOTABLES+=("cluster_locks")
    NDBINFOTABLES+=("cluster_operations")
    NDBINFOTABLES+=("cluster_transactions")
    NDBINFOTABLES+=("config_nodes")
    NDBINFOTABLES+=("config_params")
    NDBINFOTABLES+=("config_values")
    NDBINFOTABLES+=("counters")
    NDBINFOTABLES+=("cpudata")
    NDBINFOTABLES+=("cpudata_1sec")
    NDBINFOTABLES+=("cpudata_20sec")
    NDBINFOTABLES+=("cpudata_50ms")
    NDBINFOTABLES+=("cpuinfo")
    NDBINFOTABLES+=("cpustat")
    NDBINFOTABLES+=("cpustat_1sec")
    NDBINFOTABLES+=("cpustat_20sec")
    NDBINFOTABLES+=("cpustat_50ms")
    NDBINFOTABLES+=("database_memory_usage")
    NDBINFOTABLES+=("dict_obj_info")
    NDBINFOTABLES+=("dict_obj_types")
    NDBINFOTABLES+=("disk_write_speed_aggregate")
    NDBINFOTABLES+=("disk_write_speed_aggregate_node")
    NDBINFOTABLES+=("disk_write_speed_base")
    NDBINFOTABLES+=("diskpagebuffer")
    NDBINFOTABLES+=("diskstat")
    NDBINFOTABLES+=("diskstats_1sec")
    NDBINFOTABLES+=("error_messages")
    NDBINFOTABLES+=("hwinfo")
    NDBINFOTABLES+=("locks_per_fragment")
    NDBINFOTABLES+=("logbuffers")
    NDBINFOTABLES+=("logspaces")
    NDBINFOTABLES+=("membership")
    NDBINFOTABLES+=("memory_per_fragment")
    NDBINFOTABLES+=("memoryusage")
    NDBINFOTABLES+=("nodes")
    NDBINFOTABLES+=("operations_per_fragment")
    NDBINFOTABLES+=("pgman_time_track_stats")
    NDBINFOTABLES+=("processes")
    NDBINFOTABLES+=("resources")
    NDBINFOTABLES+=("restart_info")
    NDBINFOTABLES+=("server_locks")
    NDBINFOTABLES+=("server_operations")
    NDBINFOTABLES+=("server_transactions")
    NDBINFOTABLES+=("table_distribution_status")
    NDBINFOTABLES+=("table_fragments")
    NDBINFOTABLES+=("table_info")
    NDBINFOTABLES+=("table_memory_usage")
    NDBINFOTABLES+=("table_replicas")
    NDBINFOTABLES+=("tc_time_track_stats")
    NDBINFOTABLES+=("threadblocks")
    NDBINFOTABLES+=("threads")
    NDBINFOTABLES+=("threadstat")
    NDBINFOTABLES+=("transporters")
    for t in "${NDBINFOTABLES[@]}"; do
        for i in $(seq 100); do
            echo "select * from ndbinfo.$t;"
        done
    done |
        docker exec -i mysqld_1 mysql -u root \
               > autogenerated_files/ndbinfo.out
}

access-docker() {
    docker run -v "/var/lib/docker:/host-var-lib-docker" -w /host-var-lib-docker -it debian bash
}

sql() {
    docker exec -it mysqld_1 mysql --password=Abc123?e
}

sqlr() {
    docker exec -it mysqld_1 mysql -u root
}

cleanup() {
    docker system prune -f
    for vol in $(docker volume ls|sed -r '/rondb/!d;s/^local *//;'); do
        docker volume rm "$vol"
    done
    rm -rf autogenerated_files/
}

tail-memcheck() {
    docker exec -it "mysqld_$1" tail -f /srv/hops/mysql-cluster/mysql-files/memcheck.log
}

stop-mysqld() {
    docker exec -u root "mysqld_$1" kill -s TERM 9
}

check-config() {
    echo === Benchmark:
    docker exec -it -u root api_1 grep Benchmark /home/mysql/benchmarks/sysbench_single/autobench.conf
    echo === Allocator:
    docker exec -it mysqld_1 bash -c 'ls -la /usr/lib/x86*/lib*malloc*'
    echo === debian_version:
    docker exec -it mysqld_1 bash -c 'cat /etc/debian_version'
}

getTestName() {
    docker exec -i api_1 cat /home/mysql/benchmarks/sysbench_single/autobench.conf | sed -r '/^#testname=/!d;s/.*=//;'
}

getMPid() {
    for a in 8 9 10; do
        if docker exec -u root mysqld_1 [ -d /proc/$a ]; then
            cmd="$(docker exec -u root mysqld_1 cat "/proc/$a/comm")"
            if [ "$cmd" == "mysqld" ]; then
                echo $a
                return 0
            fi
        fi
    done
    return 1
}

getM1RES() {
    (docker exec -u root mysqld_1 cat "/proc/$(getMPid)/statm" |
         cut '-d ' -f2; echo '4*p'
    ) | dc
}

waitForM1() {
    while ! docker exec -i -u root mysqld_1 true; do
        echo "= Waiting for container"
        sleep 5
    done
    while ! docker exec -i -u root mysqld_1 [ -f /srv/hops/MYSQLD_STARTED ]; do
        echo "= Waiting for mysqld"
        sleep 20
    done
    while ! getMPid; do
        echo "= Waiting for mysqld PID"
        sleep 5
    done
    while ! getM1RES; do
        echo "= Waiting for mysqld RES"
        sleep 5
    done
    while ! docker exec -i -u root mysqld_1 mysql -u root -e 'show databases;'; do
        echo "= Waiting for mysqld socket"
        sleep 5
    done
    sleep 10
}

getTime6() {
    date +%s | sed -r 's/^(.*)(.{6})$/\1 \2/;'
}

dotest() {
    testName="$1"
    if [ -z "$testName" ]; then
        echo Needs a test name
        exit 1
    fi
    trap 'notifyme Test $testName ec=$? !' EXIT
    waitForM1
    actualTestName="$(getTestName)"
    if [ "$actualTestName" != "$testName" ]; then
        echo "Expected test name $testName but got $actualTestName."
        return 1
    fi
    (
        echo "== RES0=$(getM1RES)"
        echo "== TIME0: $(getTime6)"
        for a in $(seq 1000); do
            runtest sysbench_single
            echo "== RES$a=$(getM1RES)"
            echo "== TIME$a: $(getTime6)"
        done
        echo "== DONE"
    ) | tee "$testName.txt" | grep -E '^=='
}

"$@"
