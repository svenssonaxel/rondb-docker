name: Testing and Deploying Cluster
on:
  push:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, edited, closed]

jobs:
  integration-test-and-package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: rondb-image-tars
        with:
          path: /tmp/docker-save
          key: docker-save-${{ hashFiles('./Dockerfile') }}

      # For PRs, build with no cached image history
      - if: steps.rondb-image-tars.outputs.cache-hit == 'true' && github.event_name != 'pull_request'
        run: docker load --input /tmp/docker-save/rondb.tar || true

      - name: Check environment permissions
        run: |
          ls -la
          pwd
          chmod 777 .
          ls -la
          whoami
          id
          docker context ls
          docker info
          echo
          getent passwd
          echo
          echo "getent group"
          echo
          getent group
          echo
          cut -d: -f1 /etc/passwd

          # adduser mysql --gid 1000 --uid 1000
          # su mysql

          # groupadd mysql_dummy --gid 1000 && adduser mysql_dummy --ingroup mysql_dummy --uid 1000
          # groupadd mysql && adduser mysql --ingroup mysql
          # su mysql_dummy:mysql_dummy

      - name: Run docker-compose cluster with benchmarking
        run: |
          whoami
          ./build_run_docker.sh \
            --rondb-tarball-uri https://repo.hops.works/master/rondb-21.04.9-linux-glibc2.17-x86_64.tar.gz \
            --rondb-version 21.04.9 \
            --num-mgm-nodes 1 \
            --node-groups 1 \
            --replication-factor 2 \
            --num-mysql-nodes 2 \
            --num-api-nodes 1 \
            --run-benchmark sysbench_multi \
            --bench-dirs-in-volumes \
            --detached

      - name: Change permissions
        run: |
          ls -la autogenerated_files/*
          # chmod 777 .
          # chown mysql:mysql -R
          # ls -la autogenerated_files/*

      - name: Check if all containers are alive
        run: |
          start=`date +%s`
          while true; do
              end=`date +%s`
              runtime=$((end-start))
              if [ $( docker container ls --filter "status=exited" | grep rondb | wc -l ) -gt 0 ]; then
                  echo "One container is down. We can continue"
                  docker container ls --filter "status=exited"
                  exit 0
              elif [ $runtime -gt 250 ]; then
                  echo "The benchmarking seems to be stuck. We're aborting now."
                  docker ps
                  exit 1
              fi
              sleep 2
          done

      - name: Check container statuses
        run: docker container ls

      - name: Show Mgmd_1 logs
        run: docker logs mgmd_1

      - name: Show Ndbd_1 logs
        run: docker logs ndbd_1

      - name: Show Ndbd_2 logs
        run: docker logs ndbd_2

      - name: Show Mysqld_1 logs
        run: docker logs mysqld_1

      - name: Show Mysqld_2 logs
        run: docker logs mysqld_2

      - name: Show API logs
        run: docker logs api_1

      - name: Check API Exit Code
        run: |
          if [ $(docker inspect api_1 --format='{{.State.ExitCode}}') -ne 0 ] 
          then
            echo "Benchmarking failed."
            exit 1
          fi
